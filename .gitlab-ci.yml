variables:
   APP_NAME: static-webapp
   CONTAINER_IMAGE: ${IMAGE_NAME}:${CI_COMMIT_REF_NAME}
   EC2_HOST_STAGING: "52.214.185.12"
   EC2_HOST_PROD: "34.250.16.82"
   EC2_HOST_REVIEW: "34.241.202.3"


image: docker:latest
services:
  - name: docker:dind
    alias: docker

stages:
  - Build image
  - Test acceptation
  - Release image
  - Deploy review
  - Stop review
  - Deploy staging
  - Test staging
  - Deploy prod
  - Test prod

.test_template: &test
  image: alpine
  only:
    - master
  script:
    - apk --no-cache add curl
    - curl "http://$DOMAIN" | grep -i "Dimension" 

.deploy: &deploy
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - chmod -R 400 ~/.ssh
    - touch ~/.ssh/known_hosts
    - cd ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > id_rsa
    - chmod 0400 id_rsa
    - ssh-keyscan -H $EC2_HOST_DEPLOY >> ~/.ssh/known_hosts
  script:
    - command1="docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
    - command2="docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
    - command3="docker rm -f webapp || true"
    - command4="docker run -d -p 80:80 --name webapp $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
    - ssh -o StrictHostKeyChecking=no ec2-user@$EC2_HOST_DEPLOY
        -o SendEnv=CI_REGISTRY_IMAGE 
        -o SendEnv=CI_COMMIT_REF_NAME 
        -o SendEnv=CI_REGISTRY_USER 
        -o SendEnv=CI_REGISTRY_PASSWORD 
        -o SendEnv=CI_REGISTRY 
        -C "$command1 && $command2 && $command3 && $command4"

docker-build:
  # Use the official docker image.
  stage: Build image
  script:
    - docker build -t  static-webapp .
    - docker save static-webapp > static-webapp.tar
  artifacts:
    paths:
      - static-webapp.tar
    

test acceptation:
  # Official docker image.
  stage: Test acceptation
  script:
    - docker load < static-webapp.tar
    - docker run -d -p 80:80 --name webapp static-webapp
    - sleep 5
    - apk --no-cache add curl
    - curl "http://docker" | grep -i "Dimension"

release image:
  stage: Release image
  script:
    - docker load < static-webapp.tar
    - docker tag static-webapp "${IMAGE_NAME}:${CI_COMMIT_REF_NAME}"
    - docker tag static-webapp "${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker push "${IMAGE_NAME}:${CI_COMMIT_REF_NAME}"
    - docker push "${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"

deploy-staging:
  stage: Deploy staging
  only:
    - master
  <<: *deploy
  environment:
    name: staging
    url: http://${EC2_HOST_DEPLOY}


test staging:
  stage: Test staging
  <<: *test
  variables:
    DOMAIN: ${EC2_HOST_STAGING}

deploy-prod:
  stage: Deploy prod
  <<: *deploy
  only:
    - master
  environment:
    name: prod
    url: http://${EC2_HOST_DEPLOY}

test prod:
  stage: Test prod
  <<: *test
  variables:
    DOMAIN: ${EC2_HOST_PROD}

deploy-review:
  stage: Deploy review
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: http://${EC2_HOST_REVIEW}
    on_stop: stop-review
  only:
    - merge_requests
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - chmod -R 400 ~/.ssh
    - touch ~/.ssh/known_hosts
    - cd ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > id_rsa
    - chmod 0400 id_rsa
    - ssh-keyscan -H $EC2_HOST_REVIEW >> ~/.ssh/known_hosts
  script:
    - command1="docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
    - command2="docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
    - command3="docker rm -f webapp || true"
    - command4="docker run -d -p 80:80 --name webapp $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
    - ssh -o StrictHostKeyChecking=no ec2-user@$EC2_HOST_REVIEW
        -o SendEnv=CI_REGISTRY_IMAGE 
        -o SendEnv=CI_COMMIT_REF_NAME 
        -o SendEnv=CI_REGISTRY_USER 
        -o SendEnv=CI_REGISTRY_PASSWORD 
        -o SendEnv=CI_REGISTRY 
        -C "$command1 && $command2 && $command3 && $command4"

stop-review:
  stage: Stop review
  variables:
    GIT_STRATEGY: none
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  only: 
    - merge_requests
  when: manual
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - chmod -R 400 ~/.ssh
    - touch ~/.ssh/known_hosts
    - cd ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > id_rsa
    - chmod 0400 id_rsa
    - ssh-keyscan -H $EC2_HOST_REVIEW >> ~/.ssh/known_hosts
  script:
    - command1="docker stop webapp || true"
    - command2="docker rm -f webapp || true"
    - ssh -o StrictHostKeyChecking=no ec2-user@$EC2_HOST_REVIEW
        echo "Stopping and removing the webapp container..."
        -C "$command1 && $command2"