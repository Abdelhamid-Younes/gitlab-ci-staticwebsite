variables:
   APP_NAME: static-webapp
#   REVIEW_APP_NAME: younesabdh-webapp-${CI_COMMIT_REF_NAME}
#   REVIEW_API_ENDPOINT: ip10-0-1-4-cpkkmibj2epg00dv2hh0-1993.direct.docker.labs.eazytraining.fr
#   REVIEW_APP_ENDPOINT: ip10-0-1-4-cpkkmibj2epg00dv2hh0-80.direct.docker.labs.eazytraining.fr
#   STG_API_ENDPOINT: "3.255.101.210:1993"
#   STG_APP_ENDPOINT: "3.255.101.210:80"
#   PROD_API_ENDPOINT: ip10-0-1-6-cpkkmibj2epg00dv2hh0-1993.direct.docker.labs.eazytraining.fr
#   PROD_APP_ENDPOINT: ip10-0-1-6-cpkkmibj2epg00dv2hh0-80.direct.docker.labs.eazytraining.fr
#   INTERNAL_PORT: 5000
#   EXTERNAL_PORT: 80
#   TEST_PORT : "80"
   CONTAINER_IMAGE: ${IMAGE_NAME}:${CI_COMMIT_REF_NAME}
   EC2_HOST_STAGING: "52.214.185.12"
   EC2_HOST_PROD: "34.250.16.82"
   EC2_HOST_REVIEW: "34.241.202.3"
#   APP_CONTAINER_PORT: "80"
#   APP_EXPOSED_PORT: "80"

image: docker:latest
services:
  - name: docker:dind
    alias: docker

stages:
  - Build image
  - Test acceptation
  - Release image
  - Deploy review
  - Stop review
  - Deploy staging
  - Test staging
  - Deploy prod
  - Test prod

.test_template: &test
  image: alpine
  only:
    - master
  script:
    - apk --no-cache add curl
    - curl "http://$DOMAIN" | grep -i "Dimension" 

# .docker-build:
#   # Use the official docker image.
#   stage: Build image
#   script:
#     - docker build -t  static-webapp .
#     - docker save static-webapp > static-webapp.tar
#   artifacts:
#     paths:
#       - static-webapp.tar
    

# .test acceptation:
#   # Official docker image.
#   stage: Test acceptation
#   script:
#     - docker load < static-webapp.tar
#     - docker run -d -p 80:80 --name webapp static-webapp
#     - sleep 5
#     - apk --no-cache add curl
#     - curl "http://docker" | grep -i "Dimension"

# .release image:
#   stage: Release image
#   script:
#     - docker load < static-webapp.tar
#     - docker tag static-webapp "${IMAGE_NAME}:${CI_COMMIT_REF_NAME}"
#     - docker tag static-webapp "${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"
#     - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
#     - docker push "${IMAGE_NAME}:${CI_COMMIT_REF_NAME}"
#     - docker push "${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"

# .deploy-staging:
#   stage: Deploy staging
#   only:
#     - master
#   environment:
#     name: staging
#     url: http://${EC2_HOST_STAGING}
#   before_script:
#     - apk add --no-cache openssh-client
#     - eval $(ssh-agent -s)
#     - mkdir -p ~/.ssh
#     - chmod -R 400 ~/.ssh
#     - touch ~/.ssh/known_hosts
#     - cd ~/.ssh
#     - echo "$SSH_PRIVATE_KEY" > id_rsa
#     - chmod 0400 id_rsa
#     - ssh-keyscan -H $EC2_HOST_STAGING >> ~/.ssh/known_hosts
#   script:
#     - command1="docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
#     - command2="docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
#     - command3="docker rm -f webapp || true"
#     - command4="docker run -d -p 80:80 --name webapp $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
#     - ssh -o StrictHostKeyChecking=no ec2-user@$EC2_HOST_STAGING
#         -o SendEnv=CI_REGISTRY_IMAGE 
#         -o SendEnv=CI_COMMIT_REF_NAME 
#         -o SendEnv=CI_REGISTRY_USER 
#         -o SendEnv=CI_REGISTRY_PASSWORD 
#         -o SendEnv=CI_REGISTRY 
#         -C "$command1 && $command2 && $command3 && $command4"

# .test staging:
#   stage: Test staging
#   <<: *test
#   variables:
#     DOMAIN: ${EC2_HOST_STAGING}

# deploy-prod:
#   stage: Deploy prod
#   environment:
#     name: prod
#     url: http://${EC2_HOST_PROD}
#   only:
#     - master
#   before_script:
#     - apk add --no-cache openssh-client
#     - eval $(ssh-agent -s)
#     - mkdir -p ~/.ssh
#     - chmod -R 400 ~/.ssh
#     - touch ~/.ssh/known_hosts
#     - cd ~/.ssh
#     - echo "$SSH_PRIVATE_KEY" > id_rsa
#     - chmod 0400 id_rsa
#     - ssh-keyscan -H $EC2_HOST_PROD >> ~/.ssh/known_hosts
#   script:
#     - command1="docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
#     - command2="docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
#     - command3="docker rm -f webapp || true"
#     - command4="docker run -d -p 80:80 --name webapp $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
#     - ssh -o StrictHostKeyChecking=no ec2-user@$EC2_HOST_PROD
#         -o SendEnv=CI_REGISTRY_IMAGE 
#         -o SendEnv=CI_COMMIT_REF_NAME 
#         -o SendEnv=CI_REGISTRY_USER 
#         -o SendEnv=CI_REGISTRY_PASSWORD 
#         -o SendEnv=CI_REGISTRY 
#         -C "$command1 && $command2 && $command3 && $command4"

# test prod:
#   stage: Test prod
#   <<: *test
#   variables:
#     DOMAIN: ${EC2_HOST_PROD}

deploy-review:
  stage: Deploy review
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: http://${EC2_HOST_REVIEW}
    #on_stop: stop-review
  only:
    - master
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - chmod -R 400 ~/.ssh
    - touch ~/.ssh/known_hosts
    - cd ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > id_rsa
    - chmod 0400 id_rsa
    - ssh-keyscan -H $EC2_HOST_REVIEW >> ~/.ssh/known_hosts
  script:
    - command1="docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
    - command2="docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
    - command3="docker rm -f webapp || true"
    - command4="docker run -d -p 80:80 --name webapp $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
    - ssh -o StrictHostKeyChecking=no ec2-user@$EC2_HOST_REVIEW
        -o SendEnv=CI_REGISTRY_IMAGE 
        -o SendEnv=CI_COMMIT_REF_NAME 
        -o SendEnv=CI_REGISTRY_USER 
        -o SendEnv=CI_REGISTRY_PASSWORD 
        -o SendEnv=CI_REGISTRY 
        -C "$command1 && $command2 && $command3 && $command4"

# stop-review:
#   stage: Stop review
#   variables:
#     GIT_STRATEGY: none
#   environment:
#     name: review/$CI_COMMIT_REF_NAME
#     action: stop
#   only: 
#     - merge_requests
#   when: manual
#   script:
#     - apk add --no-cache openssh-client
#     - mkdir -p ~/.ssh
#     - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
#     - chmod 600 ~/.ssh/id_rsa
#     - ssh-keyscan -H $EC2_HOST_REVIEW >> ~/.ssh/known_hosts
#     - command1="docker stop webapp || true"
#     - command2="docker rm webapp || true"
#     - ssh -o StrictHostKeyChecking=no ec2-user@$EC2_HOST_REVIEW
#         echo "Stopping and removing the webapp container..."
#         -C "$command1 && $command2"
