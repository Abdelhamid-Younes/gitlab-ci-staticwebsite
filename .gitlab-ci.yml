variables:
  APP_CONTAINER_PORT: "80"
  APP_EXPOSED_PORT: "80"


image: docker:latest
services: 
    - name: docker:dind
      alias: docker

stages:
    - Build
    - Test acceptation
    - Release image
    - Deploy staging
    - Deploy prod


docker-build:
    stage: Build
    script:
        - docker build -t static-website-ay .
        - docker save static-website-ay > static-website-ay.tar
    artifacts:
        paths:
            - static-website-ay.tar

test acceptation:
    stage: Test acceptation
    script:
        - docker load < static-website-ay.tar
        - docker run -d -p 80:80 e PORT=$APP_CONTAINER_PORT --name static-website-ay-container static-website-ay
        - sleep 5
        - apk --no-cache add curl
        - curl "http://docker:80" | grep -i "Dimension"

release image:
    stage: Release image
    script:
        - docker load < static-website-ay.tar
        - docker tag static-website-ay "${IMAGE_NAME}:${CI_COMMIT_REF_NAME}"
        - docker tag static-website-ay "${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"
        - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
        - docker push "${IMAGE_NAME}:${CI_COMMIT_REF_NAME}"
        - docker push "${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"

deploy staging:
  stage: Deploy staging
  environment:
    name: staging
    url: ${DEPLOY_LINK}
  only:
    - master
  script:
    - apk --no-cache add npm
    - npm install -g heroku
    - heroku container:login
    - heroku create env-ay-staging || echo "project already exist"
    - heroku container:push -a env-ay-staging web
    - heroku container:release -a env-ay-staging web

deploy prod:
  stage: Deploy prod
  environment:
    name: prod
    url: ${DEPLOY_LINK} 
  only:
    - master
  script:
    - apk --no-cache add npm
    - npm install -g heroku
    - heroku container:login
    - heroku create env-ay-prod || echo "project already exist"
    - heroku container:push -a env-ay-prod web
    - heroku container:release -a env-ay-prod web

