variables:
   APP_NAME: static-webapp
#   REVIEW_APP_NAME: younesabdh-webapp-${CI_COMMIT_REF_NAME}
#   REVIEW_API_ENDPOINT: ip10-0-1-4-cpkkmibj2epg00dv2hh0-1993.direct.docker.labs.eazytraining.fr
#   REVIEW_APP_ENDPOINT: ip10-0-1-4-cpkkmibj2epg00dv2hh0-80.direct.docker.labs.eazytraining.fr
   STG_API_ENDPOINT: "3.255.101.210:1993"
   STG_APP_ENDPOINT: "3.255.101.210:80"
#   PROD_API_ENDPOINT: ip10-0-1-6-cpkkmibj2epg00dv2hh0-1993.direct.docker.labs.eazytraining.fr
#   PROD_APP_ENDPOINT: ip10-0-1-6-cpkkmibj2epg00dv2hh0-80.direct.docker.labs.eazytraining.fr
#   INTERNAL_PORT: 5000
#   EXTERNAL_PORT: 80
#   TEST_PORT : "80"
   CONTAINER_IMAGE: ${IMAGE_NAME}:${CI_COMMIT_REF_NAME}
   EC2_HOST: "3.255.101.210"
#   APP_CONTAINER_PORT: "80"
#   APP_EXPOSED_PORT: "80"

image: docker:latest
services:
  - name: docker:dind
    alias: docker

stages:
  - Build image
  - Test acceptation
  - Release image
  - Deploy review
  - Stop review
  - Deploy staging
  - Test staging
  - Deploy prod
  - Test prod

.test_template: &test
  image: alpine
  only:
    - master
  script:
    - apk --no-cache add curl
    - curl "http://$DOMAIN" | grep -i "Dimension" 

# docker-build:
#   # Use the official docker image.
#   stage: Build image
#   script:
#     - docker build -t  ${APP_NAME} .
#     - docker save ${APP_NAME} > ${APP_NAME}.tar
#   artifacts:
#     paths:
#       - ${APP_NAME}.tar

.docker-build:
  # Use the official docker image.
  stage: Build image
  script:
    - docker build -t  static-webapp .
    - docker save static-webapp > static-webapp.tar
  artifacts:
    paths:
      - static-webapp.tar
    

.test acceptation:
  # Official docker image.
  stage: Test acceptation
  script:
    - docker load < static-webapp.tar
    - docker run -d -p 80:80 --name webapp static-webapp
    - sleep 5
    - apk --no-cache add curl
    - curl "http://docker" | grep -i "Dimension"

.release image:
  stage: Release image
  script:
    - docker load < static-webapp.tar
    - docker tag static-webapp "${IMAGE_NAME}:${CI_COMMIT_REF_NAME}"
    - docker tag static-webapp "${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker push "${IMAGE_NAME}:${CI_COMMIT_REF_NAME}"
    - docker push "${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"

deploy-staging:
  stage: Deploy staging
  script:
    - apk add --no-cache openssh-client
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts
    - scp static-webapp.tar ec2-user@$EC2_HOST:/tmp/static-webapp.tar
    - ssh ec2-user@$EC2_HOST << 'EOF'
        docker load < /tmp/static-webapp.tar
        docker stop webapp || true
        docker rm webapp || true
        docker run -d -p 80:80 --name webapp static-webapp
      EOF
  only:
    - master

# deploy staging:
#   stage: Deploy staging
#   environment:
#     name: staging
#     url: http://${STG_APP_ENDPOINT}
#   only:
#     - master
#   script:
#     - apk --no-cache add curl
#     - 'curl -X POST http://${STG_API_ENDPOINT}/staging -H "Content-Type: application/json" -d "{\"your_name\":\"${APP_NAME}\",\"container_image\":\"${CONTAINER_IMAGE}\", \"external_port\":\"${EXTERNAL_PORT}\", \"internal_port\":\"${INTERNAL_PORT}\"}"'

# test staging:
#   stage: Test staging
#   <<: *test
#   variables:
#     DOMAIN: ${STG_APP_ENDPOINT}

# test acceptation:
#   # Official docker image.
#   stage: Test acceptation
#   script:
#     - docker load < ${APP_NAME}.tar
#     - docker run -d -p $APP_CONTAINER_PORT:$APP_EXPOSED_PORT -e PORT=$APP_CONTAINER_PORT --name webapp ${APP_NAME}
#     - sleep 5
#     - apk --no-cache add curl
#     - curl "http://docker:$APP_CONTAINER_PORT" | grep -i "Dimension"

# release image:
#   stage: Release image
#   script:
#     - docker load < ${APP_NAME}.tar
#     - docker tag ${APP_NAME} "${IMAGE_NAME}:${CI_COMMIT_REF_NAME}"
#     - docker tag ${APP_NAME} "${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"
#     - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
#     - docker push "${IMAGE_NAME}:${CI_COMMIT_REF_NAME}"
#     - docker push "${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"

# deploy review:
#   stage: Deploy review
#   environment:
#     name: review/$CI_COMMIT_REF_NAME
#     url: http://${EAZYLABS_IP}-${REVIEW_EXTERNAL_PORT}.${EAZYLABS_DOMAIN}
#     on_stop: stop review
#   only: 
#     - merge_requests
#   script:
#     - apk --no-cache add curl
#     - 'curl -i -v -X POST http://${API_ENDPOINT}/review -H "Content-Type: application/json" -d "{\"your_name\":\"${APP_NAME}\",\"container_image\":\"${CONTAINER_IMAGE}\", \"external_port\":\"${REVIEW_EXTERNAL_PORT}\", \"internal_port\":\"${INTERNAL_PORT}\"}" 2>&1 | grep 200'
    
# stop review:
#   stage: Stop review
#   variables:
#     GIT_STRATEGY: none
#   environment:
#     name: review/$CI_COMMIT_REF_NAME
#     action: stop
#   only: 
#     - merge_requests
#   when: manual
#   script:
#     - apk --no-cache add curl
#     - 'curl -i -v -X DELETE http://${API_ENDPOINT}/review -H "Content-Type: application/json" -d "{\"your_name\":\"${APP_NAME}\"}"'

# deploy staging:
#   stage: Deploy staging
#   environment:
#     name: staging
#     url: http://${STG_APP_ENDPOINT}
#   only:
#     - master
#   script:
#     - apk --no-cache add curl
#     - 'curl -X POST http://${STG_API_ENDPOINT}/staging -H "Content-Type: application/json" -d "{\"your_name\":\"${APP_NAME}\",\"container_image\":\"${CONTAINER_IMAGE}\", \"external_port\":\"${EXTERNAL_PORT}\", \"internal_port\":\"${INTERNAL_PORT}\"}"'

# test staging:
#   stage: Test staging
#   <<: *test
#   variables:
#     DOMAIN: ${STG_APP_ENDPOINT}

# deploy prod:
#   stage: Deploy prod
#   environment:
#     name: prod
#     url: http://${EAZYLABS_IP}-${PROD_EXTERNAL_PORT}.${EAZYLABS_DOMAIN}
#   only: 
#     - main
#   script:
#     - apk --no-cache add curl
#     - 'curl -v -X POST http://${API_ENDPOINT}/prod -H "Content-Type: application/json" -d "{\"your_name\":\"${APP_NAME}\",\"container_image\":\"${CONTAINER_IMAGE}\", \"external_port\":\"${PROD_EXTERNAL_PORT}\", \"internal_port\":\"${INTERNAL_PORT}\"}" 2>&1 | grep 200'

# test prod:
#   stage: Test prod
#   <<: *test
#   variables:
#     DOMAIN: ${EAZYLABS_IP}-${PROD_EXTERNAL_PORT}.${EAZYLABS_DOMAIN}
#   only:
#     - main